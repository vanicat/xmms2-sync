#!/usr/bin/ruby

# Copyright (c) 2011,2012 Rémi Vanicat
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# SOFTWARE IN THE PUBLIC INTEREST, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# 
# Except as contained in this notice, the name of Rémi Vanicat shall not be
# used in advertising or otherwise to promote the sale, use or other dealings
# in this Software without prior written authorization from Rémi Vanicat.

# This code is wrote using org-mode's babel's litterate programing
# you should modify xmms2-sync.org, and not xmms2-sync directly.
# That said I will accept patch to this file and bring them back into
# The org-mode one.
#
# please read org-mode documentation for help on manipulating the org
# file.

def print_size(size, human)
  if human then
    units = [ 'o', 'Kio', 'Mio', 'Gio', 'Tio', 'Pio', 'Eio', 'Zio', 'Yio' ]
    unit_index = 0
    while size > 1024 and unit_index + 1 < units.length do
      size /= 1024
      unit_index += 1
    end
    return "#{size} #{units[unit_index]}"
  else
    return size.to_s
  end
end


require 'xmmsclient'
require 'optparse'
require 'uri'
require 'pathname'
require 'fileutils'

def encoding_path(path)
  path=path.to_s
  path=path.gsub(/[<>:\"\\|?*]/,'_')
  path.gsub!(/\.*\//,'/')
  return path
end
def compare_path(path1,path2)
  path1 = encoding_path(path1)
  path2 = encoding_path(path2)
  path1.casecmp(path2)
end



class XmmsInteract
  def get(info, attr, default=nil)
    info[attr].map[0][1]
  rescue NoMethodError => e
    default
  end

  def initialize
    unless connect!
      puts 'Failed to connect to XMMS2 daemon.'
      puts 'Please make sure xmms2d is running and using the correct IPC path.'
      exit
    end
  end

  def connect!
    begin
      @xc = Xmms::Client.new('Xmms2Sync').connect(ENV['XMMS_PATH'])
    rescue Xmms::Client::ClientError
      return false
    end
  
    @xc.on_disconnect do
      exit
    end
  
    return true
  end

  def get_colletion(pattern, options)
    maxsize = options[:size]
    random = options[:random]
    human = options[:human]
  
    coll = Xmms::Collection.parse(pattern)
    if random then
      order = ['random']          # doesn't work for now...
    else
      order = ['id']
    end
    res = @xc.coll_query_info(coll,['url','size'],order).wait.value
  
    list = []
  
    size = 0
  
    res.each do |song|
      if song[:size] then
        song_path = Pathname(URI.decode(URI(song[:url]).path).gsub(/\+/, ' ').encode!("UTF-8","UTF-8")) # will fail if the url in xmms2 is not UTF-8 encoded
        if song_path.exist? then
          size += song[:size]
          if maxsize && size > maxsize then
            size -= song[:size]
            break
          end
          list << song_path
        end
      end
    end
    print "size to sync #{print_size(size, human)}\n"
    if (maxsize && ! random && size > maxsize ) then
      print "to much songs to sync\n"
      exit(-1)                  #TODO: do not exit for when there is a gui
    end
    if options[:encode] then
      list.sort! do |x,y| compare_path x,y end
    else
      list.sort! do |x,y| x.to_s <=> y.to_s end
    end
    return list
  end
end

def find_in_dir path,options
  path=Pathname(path)
  li = []
  path.find do |x|
    li << x
  end
  if options[:encode] then
    li.sort! do |x,y| compare_path(x,y) end
  else
    li.sort! do |x,y| x.to_s <=> y.to_s end
  end
  return li
end

def action_from_source(sync_dir,dest_dir,song,options)
  source_song=sync_dir + song
  if options[:encode] then
    dest_song=dest_dir + encoding_path(song)
  else
    dest_song=dest_dir + song
  end
  if not(options[:dry_run]) then
    dest_song.dirname.mkpath
  end
  if not(options[:silence]) then
    print("copying #{source_song} to #{dest_song}\n")
  end
  if not(options[:dry_run]) then
    FileUtils.cp(source_song,dest_song)
  end
end
def action_from_dest(sync_dir,dest_dir,song,options)
  dest_song=dest_dir + song
  if not(options[:silence]) then
    print("deleting #{dest_song}\n")
  end
  if not(options[:dry_run]) then
    dest_song.unlink
  end
end
def action_both(sync_dir,dest_dir,song,options)
  # let's do nothing
end
def get_song(dir,list)
  song = list.pop
  while song && song.directory?
    song = list.pop
  end
  song && song.relative_path_from(dir)
end

def sync(sync_dir,sync_list,dest_dir,dest_list,options)
  dest_song = get_song(dest_dir,dest_list)
  sync_song = get_song(sync_dir,sync_list)
  while dest_song && sync_song
    if options[:encode]
      cmp = compare_path dest_song,sync_song
    else
      cmp = dest_song <=> sync_song
    end

    if cmp > 0
      action_from_dest(sync_dir,dest_dir,dest_song,options)
      dest_song = get_song(dest_dir,dest_list)
    elsif cmp < 0
      action_from_source(sync_dir,dest_dir,sync_song,options)
      sync_song = get_song(sync_dir,sync_list)
    else
      action_both(sync_dir,dest_dir,sync_song,options)
      dest_song = get_song(dest_dir,dest_list)
      sync_song = get_song(sync_dir,sync_list)
    end
  end
  while dest_song
    action_from_dest(sync_dir,dest_dir,dest_song,options)
    dest_song = get_song(dest_dir,dest_list)
  end
  while sync_song
    action_from_source(sync_dir,dest_dir,sync_song,options)
    sync_song = get_song(sync_dir,sync_list)
  end
end

$0 = "xmms2-sync"

def main ()
  options = {}
  
  optparse = OptionParser.new do|opts|
    # Set a banner, displayed at the top
    # of the help screen.
    opts.banner = "Usage: xmms2-mp3player-sync [options] sync-from sync-to search-pattern"
    options[:size] = nil
    opts.on('-s', '--size size', 'TODO Size to be sync, in Byte') do |size|
      options[:size] = size.to_i
    end
  
    options[:random] = false
    opts.on('-r', '--random', 'TODO if collection is too big, choose file to sync at random') do
      options[:random] = true
    end
  
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end
  
  
    options[:dry_run] = false
    opts.on( '-n', '--no-do', 'Do nothing, just print what should be done' ) do
      options[:dry_run] = true
    end
  
    options[:silence] = false
    opts.on( '-o', '--only-size', 'Do nothing, just print the size of the search' ) do
      options[:silence] = false
      options[:dry_run] = true
    end
  
    options[:human]=false
    opts.on( '-H', '--human-readable-size', 'When printing size convert to human readable one' ) do
      options[:human]=true
    end
  
    options[:encode]=false
    opts.on( '-e', '--encode', 'Encode the file name' ) do
      options[:encode]=true
    end
  end
  
  optparse.parse!
  
  if ARGV.length < 3 then
    puts(optparse)
    exit(-1)
  end
  
  syncfrom = ARGV.slice!(0)
  syncto = ARGV.slice!(0)
  pattern = ARGV

  xc = XmmsInteract.new
  synclist = xc.get_colletion(pattern.join(" "),options)

  destlist = find_in_dir(syncto,options)

  sync(Pathname(syncfrom),synclist,Pathname(syncto),destlist,options)
end

main()
