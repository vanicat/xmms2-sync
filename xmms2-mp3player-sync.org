#+TITLE: Xmms Gtk Rater
#+AUTHOR: Rémi Vanicat <vanicat@debian.org>

Copyright: (c) 2011 Rémi Vanicat

* About
  This is a small client for xmms2 that will allow sync a collection
  with a removable media player.

  To run you must first extract the code with emacs an org-mode
  C-c C-v t then copy xmms2-sync somewhere in the path so you can run
  it.

** Some TODO:

*** TODO use ipod specific library
*** TODO build a GUI
*** TODO use a config file.

** Licence
   :PROPERTIES:
   :ID:       400dffa3-3529-4583-b776-af98d7d5610e
   :END:

   #+source: copyright
   #+begin_src ruby
     Copyright (c) 2011 Rémi Vanicat

     Permission is hereby granted, free of charge, to any person obtaining a
     copy of this software and associated documentation files (the "Software"),
     to deal in the Software without restriction, including without limitation
     the rights to use, copy, modify, merge, publish, distribute, sublicense,
     and/or sell copies of the Software, and to permit persons to whom the
     Software is furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     SOFTWARE IN THE PUBLIC INTEREST, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR
     OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
     ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.

     Except as contained in this notice, the name of Rémi Vanicat shall not be
     used in advertising or otherwise to promote the sale, use or other dealings
     in this Software without prior written authorization from Rémi Vanicat.
   #+end_src

* The structure of the program
  :PROPERTIES:
  :ID:       febdc89b-bfbc-4782-bf53-8b19ff298cf4
  :END:
  #+begin_src ruby :tangle xmms2-sync :noweb yes :shebang #!/usr/bin/ruby
    # <<copyright>>

    # This code is wrote using org-mode's babel's litterate programing
    # you should modify xmms2-sync.org, and not xmms2-mp3player-sync.org directly.

    <<libraries>>

    <<xmms-extension>>

    <<server-interaction>>

    <<path-reading>>

    <<sync>>

    <<runing-it>>
  #+end_src

** then included libraries
   :PROPERTIES:
   :ID:       303f4137-59ce-4c9f-810d-00f24548bafa
   :END:
   #+source: libraries
   #+begin_src ruby
     require 'xmmsclient'
     require 'optparse'
     require 'uri'
     require 'pathname'
     require 'fileutils'
   #+end_src

* The interaction with the xmms server
** The structure of the class
   :PROPERTIES:
   :ID:       60333ece-ab83-4b09-b474-e04e9ea0606c
   :END:
   #+source: server-interaction
   #+begin_src ruby :noweb yes
     class XmmsInteract
       <<reading-xmms-hash>>

       <<initialization>>

       <<connection-handling>>

       <<reading-server-information>>
     end
   #+end_src

   #+source: reading-xmms-hash
   #+begin_src ruby
     def get(info, attr, default=nil)
       info[attr].map[0][1]
     rescue NoMethodError => e
       default
     end
   #+end_src

** initializing
   :PROPERTIES:
   :ID:       83142473-12ba-40ab-b4d8-9a9169b4db1f
   :END:
   #+source: initialization
   #+begin_src ruby
     def initialize
       unless connect!
         puts 'Failed to connect to XMMS2 daemon.'
         puts 'Please make sure xmms2d is running and using the correct IPC path.'
         exit
       end
     end
   #+end_src

** connection hangling
   :PROPERTIES:
   :ID:       acdc6116-8573-46f2-be35-c706c3d5f5b7
   :END:
   we connect, and reconnect.
   #+source: connection-handling
   #+begin_src ruby
     def connect!
       begin
         @xc = Xmms::Client.new('GtkRater').connect(ENV['XMMS_PATH'])
       rescue Xmms::Client::ClientError
         return false
       end

       @xc.on_disconnect do
         exit
       end

       return true
     end
   #+end_src

** TODO Reading collections
   #+source: reading-server-information
   #+begin_src ruby
     def get_colletion(pattern,maxsize,random)
       coll = Xmms::Collection.parse(pattern)
       if random then
         order = ['random']          # doesn't work for now...
       else
         order = ['id']
       end
       res = @xc.coll_query_info(coll,['url','size'],order).wait.value

       list = []

       size = 0

       res.each do |song|
         if song[:size] then
           song_path = Pathname(URI.decode(URI(song[:url]).path).gsub(/\+/, ' '))
           if song_path.exist? then
             size += song[:size]
             if maxsize && size > maxsize then
               break
             end
             list << song_path
           end
         end
       end
       if (maxsize && ! random && size > maxsize ) then
         exit(-1)                  #TODO: do not exit for when there is a gui
       end
       list.sort! do |x,y| x.to_s <=> y.to_s end
       return list
     end
   #+end_src

* Reading a directories
  #+source: path-reading
  #+begin_src ruby
    def find_in_dir path
      path=Pathname(path)
      li = []
      path.find do |x|
        li << x
      end
      li.sort! do |x,y| x.to_s <=> y.to_s end
      return li
    end
  #+end_src

* syncing directories
** The syncing structure
   #+source: sync
   #+begin_src ruby
     <<action-only-source>>
     <<action-only-dest>>
     <<action-both>>
     <<syncing-it>>
   #+end_src

** syncing when there is the source and not the dest
   #+source: action-only-source
   #+begin_src ruby
     def action_from_source(sync_dir,dest_dir,song)
       source_song=sync_dir + song
       dest_song=dest_dir + song
       dest_song.dirname.mkpath
       print("copying #{source_song} to #{dest_song}\n")
       FileUtils.cp(source_song,dest_song)
     end
   #+end_src

** syncing when there is the dest and not the source
   #+source: action-only-dest
   #+begin_src ruby
     def action_from_dest(sync_dir,dest_dir,song)
       dest_song=dest_dir + song
       print("deleting #{dest_song}\n")
       dest_song.unlink
     end
   #+end_src

** syncing when there both
   #+source: action-both
   #+begin_src ruby
     def action_both(sync_dir,dest_dir,song)
       # let's do nothing
     end
   #+end_src

** Let's do it
   #+source: syncing-it
   #+begin_src ruby
     def get_song(dir,list)
       song = list.pop
       while song && song.directory?
         song = list.pop
       end
       song && song.relative_path_from(dir)
     end

     def sync(sync_dir,sync_list,dest_dir,dest_list)
       dest_song = get_song(dest_dir,dest_list)
       sync_song = get_song(sync_dir,sync_list)
       while dest_song && sync_song
         if dest_song.to_s > sync_song.to_s
           action_from_dest(sync_dir,dest_dir,dest_song)
           dest_song = get_song(dest_dir,dest_list)
         elsif dest_song.to_s < sync_song.to_s
           action_from_source(sync_dir,dest_dir,sync_song)
           sync_song = get_song(sync_dir,sync_list)
         else
           action_both(sync_dir,dest_dir,sync_song)
           dest_song = get_song(dest_dir,dest_list)
           sync_song = get_song(sync_dir,sync_list)
         end
       end
       while dest_song
         action_from_dest(sync_dir,dest_dir,dest_song)
         dest_song = get_song(dest_dir,dest_list)
       end
       while sync_song
         action_from_source(sync_dir,dest_dir,sync_song)
         sync_song = get_song(sync_dir,sync_list)
       end
     end
   #+end_src

* TODO Connecting the dot, and running all this
  :PROPERTIES:
  :ID:       d7319434-31e9-41b7-a9e4-19759edaaaeb
  :END:
  #+source: runing-it
  #+begin_src ruby
    $0 = "xmms-gtk-rater"

    def main ()
      options = {}

      optparse = OptionParser.new do|opts|
        # Set a banner, displayed at the top
        # of the help screen.
        opts.banner = "Usage: xmms2-mp3player-sync [options] sync-from sync-to search-pattern"
        options[:size] = nil
        opts.on('-s', '--size size', 'TODO Size to be sync, in Byte') do |size|
          options[:size] = size.to_i
        end

        options[:random] = false
        opts.on('-r', '--random', 'TODO if collection is too big, choose file to sync at random') do
          options[:random] = true
        end

        opts.on( '-h', '--help', 'Display this screen' ) do
          puts opts
          exit
        end
      end

      optparse.parse!

      if ARGV.length < 3 then
        puts(optparse)
      end

      syncfrom = ARGV.slice!(0)
      syncto = ARGV.slice!(0)
      pattern = ARGV

      xc = XmmsInteract.new
      synclist = xc.get_colletion(pattern.join(" "),options[:size],options[:random])

      destlist = find_in_dir(syncto)

      sync(Pathname(syncfrom),synclist,Pathname(syncto),destlist)
    end

    main()

  #+end_src
